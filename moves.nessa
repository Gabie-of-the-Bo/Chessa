import * from range;

class Move {
    // In order: Pawn, rook, knight, bishop, queen, king
    piece: Int;

    // In order: Normal, double pawn push, only capture, en passant, castling
    type: Int;

    // Bottom (White) to top (Black), right to left
    from_row: Int;
    from_col: Int;

    to_row: Int;
    to_col: Int;
}

fn white_pawn_moves() -> Array<Move> {
    let res = arr<Move>();

    for row in range(1, 7) {
        for col in range(0, 8) {
            res.push(Move(0, 0, *row, *col, row + 1, *col));

            // Double mov in row 1
            if row == 1 {
                res.push(Move(0, 1, *row, *col, row + 2, *col));
            }

            if col > 0 {
                res.push(Move(0, 2, *row, *col, row + 1, *col - 1));
            }

            if col < 7 {
                res.push(Move(0, 2, *row, *col, row + 1, *col + 1));
            }
        }
    }

    return move(res);
}

fn white_rook_moves() -> Array<Move> {
    let res = arr<Move>();

    for row in range(0, 8) {
        for col in range(0, 8) {
            for mov in range(0, 8) {
                if mov != row {
                    res.push(Move(1, 0, *row, *col, *mov, *col));
                }

                if mov != col {
                    res.push(Move(1, 0, *row, *col, *row, *mov));
                }
            }
        }
    }

    return move(res);
}

fn white_knight_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    offsets.push((1, 2));
    offsets.push((2, 1));
    offsets.push((-1, -2));
    offsets.push((-2, -1));
    offsets.push((-1, 2));
    offsets.push((-2, 1));
    offsets.push((1, -2));
    offsets.push((2, -1));

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(2, 0, *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}

fn white_bishop_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    for i in range(1, 8) {
        offsets.push((*i, *i));
        offsets.push((-i, -i));
        offsets.push((-i, *i));
        offsets.push((*i, -i));
    }

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(3, 0, *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}

fn white_queen_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    for i in range(1, 8) {
        offsets.push((*i, *i));
        offsets.push((-i, -i));
        offsets.push((-i, *i));
        offsets.push((*i, -i));
        offsets.push((0, *i));
        offsets.push((0, -i));
        offsets.push((-i, 0));
        offsets.push((*i, 0));
    }

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(4, 0, *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}

fn white_king_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    offsets.push((0, 1));
    offsets.push((0, -1));
    offsets.push((1, 0));
    offsets.push((-1, 0));
    offsets.push((1, 1));
    offsets.push((1, -1));
    offsets.push((-1, 1));
    offsets.push((-1, -1));

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(5, 0, *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}