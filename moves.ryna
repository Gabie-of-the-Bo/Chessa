import * from range;
import * from hashmap;

import * from /bitboard;
import * from /printing;

class Move {
    // In order: Pawn, rook, knight, bishop, queen, king
    piece: Int;

    // In order: Normal, double pawn push, only capture, en passant, castling
    type: Int;

    // In order: prm. queen, prm. rook, prm. bishop, prm. knight
    promotion: Int;

    // Movement mask. Its meaning depends on the context
    mask: Int;

    // Bottom (White) to top (Black), right to left
    from_row: Int;
    from_col: Int;

    to_row: Int;
    to_col: Int;
}

type LookupTables = Array<Array<Int>>;
type MovesTable = HashMap<Int, HashMap<Int, Array<Move>>>;

fn print(m: &Move) {
    if m.type == 4 {
        if m.from_col == 0 {
            print("King castling");
        
        } else {
            print("Queen castling");
        }

    } else {
        if m.piece == 0 {
            print("Pawn");
        
        } else if m.piece == 1 {
            print("Rook");
        
        } else if m.piece == 2 {
            print("Knight");
        
        } else if m.piece == 3 {
            print("Bishop");
        
        } else if m.piece == 4 {
            print("Queen");
        
        } else if m.piece == 5 {
            print("King");
        }

        print(" from ");
        print(code_point_to_str((7 - m.from_col) + 'a'));
        print(m.from_row + 1);

        print(" to ");
        print(code_point_to_str((7 - m.to_col) + 'a'));
        print(m.to_row + 1);

        if m.promotion == 1 {
            print(" (Queen promotion)");
        
        } else if m.promotion == 2 {
            print(" (Rook promotion)");
        
        } else if m.promotion == 3 {
            print(" (Bishop promotion)");
        
        } else if m.promotion == 4 {
            print(" (Knight promotion)");
        }
    }
}

implement Printable for &Move;

fn pawn_moves(white: Bool) -> Array<Move> {
    let res = arr<Move>();

    let movement_dir = 1;

    if !white {
        movement_dir := -1;
    }

    for row in range(1, 7) {
        for col in range(0, 8) {
            let to_mask = bitboard_from_coords(*row + movement_dir, *col);

            // Double mov in row 1
            if (white && row == 1) || (!white && row == 6) {
                let to_mask_2 = bitboard_from_coords(*row + movement_dir * 2, *col);
                res.push(Move(0, 1, 0, to_mask | to_mask_2, *row, *col, row + movement_dir * 2, *col));
            }

            // Promotions
            if (white && row == 6) || (!white && row == 1) {
                res.push(Move(0, 0, 1, *to_mask, *row, *col, row + movement_dir, *col));
                res.push(Move(0, 0, 2, *to_mask, *row, *col, row + movement_dir, *col));
                res.push(Move(0, 0, 3, *to_mask, *row, *col, row + movement_dir, *col));
                res.push(Move(0, 0, 4, *to_mask, *row, *col, row + movement_dir, *col));
            
            } else {
                // Simple move
                res.push(Move(0, 0, 0, *to_mask, *row, *col, row + movement_dir, *col));
            }

            // Attack moves
            if col > 0 {
                let attack_mask = bitboard_from_coords(row + movement_dir, *col - 1);

                // Promotions
                if (white && row == 6) || (!white && row == 1) {
                    res.push(Move(0, 2, 1, *attack_mask, *row, *col, row + movement_dir, *col - 1));
                    res.push(Move(0, 2, 2, *attack_mask, *row, *col, row + movement_dir, *col - 1));
                    res.push(Move(0, 2, 3, *attack_mask, *row, *col, row + movement_dir, *col - 1));
                    res.push(Move(0, 2, 4, *attack_mask, *row, *col, row + movement_dir, *col - 1));
                
                } else {
                    // Simple move
                    res.push(Move(0, 2, 0, *attack_mask, *row, *col, row + movement_dir, *col - 1));
                }
            }

            if col < 7 {
                let attack_mask = bitboard_from_coords(row + movement_dir, *col + 1);

                // Promotions
                if (white && row == 6) || (!white && row == 1) {
                    res.push(Move(0, 2, 1, *attack_mask, *row, *col, row + movement_dir, *col + 1));
                    res.push(Move(0, 2, 2, *attack_mask, *row, *col, row + movement_dir, *col + 1));
                    res.push(Move(0, 2, 3, *attack_mask, *row, *col, row + movement_dir, *col + 1));
                    res.push(Move(0, 2, 4, *attack_mask, *row, *col, row + movement_dir, *col + 1));
                
                } else {
                    // Simple move
                    res.push(Move(0, 2, 0, *attack_mask, *row, *col, row + movement_dir, *col + 1));
                }
            }

            // En passant moves
            if (white && row == 4) || (!white && row == 3) {
                if col > 0 {
                    let attack_mask = bitboard_from_coords(row + movement_dir, *col - 1);
                    res.push(Move(0, 3, 0, *attack_mask, *row, *col, row + movement_dir, *col - 1));
                }

                if col < 7 {
                    let attack_mask = bitboard_from_coords(row + movement_dir, *col + 1);
                    res.push(Move(0, 3, 0, *attack_mask, *row, *col, row + movement_dir, *col + 1));
                }
            }
        }
    }

    return move(res);
}

fn is_pawn_move_legal(mov: @Move, p_mask: @Int, o_mask: @Int, en_passant_mask: @Int) -> Bool {
    if mov.type == 2 {
        return o_mask & mov.mask != 0;
    }

    if mov.type == 3 {
        return en_passant_mask & mov.mask != 0;
    }
    
    return mov.mask & (p_mask | o_mask) == 0;
}

fn rook_moves(white: Bool) -> Array<Move> {
    let res = arr<Move>();

    for row in range(0, 8) {
        for col in range(0, 8) {
            for mov in range(0, 8) {
                if mov != row {
                    res.push(Move(1, 0, 0, get_sliding_mask(*row, *col, *mov, *col), *row, *col, *mov, *col));
                }

                if mov != col {
                    res.push(Move(1, 0, 0, get_sliding_mask(*row, *col, *row, *mov), *row, *col, *row, *mov));
                }
            }
        }
    }

    // Castling
    if *white {
        res.push(Move(1, 4, 0, 14, 0, 0, 0, 0));                   // BR
        res.push(Move(1, 4, 0, 56, 0, 7, 0, 0));                   // BL
    
    } else {
        res.push(Move(1, 4, 0, 1008806316530991104, 7, 0, 0, 0));  // TR
        res.push(Move(1, 4, 0, 4035225266123964416, 7, 7, 0, 0));  // TL
    }

    return move(res);
}

fn is_rook_move_legal(mov: @Move, p_mask: @Int, o_mask: @Int, queen_cast: Bool, king_cast: Bool, attack_mask: &Int) -> Bool {
    if mov.type == 4 {
        if mov.from_col == 0 && mov.from_row == 0 {
            return king_cast &&                     // Castling rights
                   mov.mask & attack_mask == 0 && // No check 
                   6 & (o_mask | p_mask) == 0;      // Empty spaces 
        
        } else if mov.from_col == 7 && mov.from_row == 0 {
            return queen_cast &&                    // Castling rights
                   mov.mask & attack_mask == 0 && // No check 
                   112 & (o_mask | p_mask) == 0;    // Empty spaces 
        
        } else if mov.from_col == 0 && mov.from_row == 7 {
            return king_cast &&                                 // Castling rights
                   mov.mask & attack_mask == 0 &&             // No check 
                   432345564227567616 & (o_mask | p_mask) == 0; // Empty spaces 
        
        } else {
            return queen_cast &&                                 // Castling rights
                   mov.mask & attack_mask == 0 &&              // No check 
                   8070450532247928832 & (o_mask | p_mask) == 0; // Empty spaces 
        }

    } else if p_mask & bitboard_from_coords(*mov.to_row, *mov.to_col) != 0 {
        return false;
    }
    
    return mov.mask & (p_mask | o_mask) == 0;
}

fn knight_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    offsets.push((1, 2));
    offsets.push((2, 1));
    offsets.push((-1, -2));
    offsets.push((-2, -1));
    offsets.push((-1, 2));
    offsets.push((-2, 1));
    offsets.push((1, -2));
    offsets.push((2, -1));

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(2, 0, 0, 0, *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}

fn is_knight_move_legal(mov: @Move, p_mask: @Int, o_mask: @Int) -> Bool {    
    return p_mask & bitboard_from_coords(*mov.to_row, *mov.to_col) == 0;
}

fn bishop_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    for i in range(1, 8) {
        offsets.push((*i, *i));
        offsets.push((-i, -i));
        offsets.push((-i, *i));
        offsets.push((*i, -i));
    }

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(3, 0, 0, get_sliding_mask(*row, *col, *target_row, *target_col), *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}

fn is_bishop_move_legal(mov: @Move, p_mask: @Int, o_mask: @Int) -> Bool {
    // Cannot move to a square with a piece you have
    if p_mask & bitboard_from_coords(*mov.to_row, *mov.to_col) != 0 {
        return false;
    }
    
    return mov.mask & (p_mask | o_mask) == 0;
}

fn queen_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    for i in range(1, 8) {
        offsets.push((*i, *i));
        offsets.push((-i, -i));
        offsets.push((-i, *i));
        offsets.push((*i, -i));
        offsets.push((0, *i));
        offsets.push((0, -i));
        offsets.push((-i, 0));
        offsets.push((*i, 0));
    }

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(4, 0, 0, get_sliding_mask(*row, *col, *target_row, *target_col), *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}

fn is_queen_move_legal(mov: @Move, p_mask: @Int, o_mask: @Int) -> Bool {
    // Cannot move to a square with a piece you have
    if p_mask & bitboard_from_coords(*mov.to_row, *mov.to_col) != 0 {
        return false;
    }
    
    return mov.mask & (p_mask | o_mask) == 0;
}

fn king_moves() -> Array<Move> {
    let res = arr<Move>();
    let offsets = arr<(Int, Int)>();

    offsets.push((0, 1));
    offsets.push((0, -1));
    offsets.push((1, 0));
    offsets.push((-1, 0));
    offsets.push((1, 1));
    offsets.push((1, -1));
    offsets.push((-1, 1));
    offsets.push((-1, -1));

    for row in range(0, 8) {
        for col in range(0, 8) {
            for offset in offsets {
                let off_row = offset.get_0();
                let off_col = offset.get_1();

                let target_row = row + off_row;
                let target_col = col + off_col;

                if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
                    res.push(Move(5, 0, 0, 0, *row, *col, *target_row, *target_col));
                }
            }
        }
    }

    return move(res);
}

fn is_king_move_legal(mov: @Move, p_mask: @Int, o_mask: @Int) -> Bool {    
    return p_mask & bitboard_from_coords(*mov.to_row, *mov.to_col) == 0;
}

fn get_all_moves(white: Bool) -> MovesTable {
    let res = hashmap<Int, HashMap<Int, Array<Move>>>();

    res.add(0, hashmap<Int, Array<Move>>()); // Pawn
    res.add(1, hashmap<Int, Array<Move>>()); // Rook
    res.add(2, hashmap<Int, Array<Move>>()); // Knight
    res.add(3, hashmap<Int, Array<Move>>()); // Bishop
    res.add(4, hashmap<Int, Array<Move>>()); // Queen
    res.add(5, hashmap<Int, Array<Move>>()); // King

    /*
        Pawn moves
    */

    let pawn = res.get(0.mut()).as<@HashMap<Int, Array<Move>>>();

    for mov in pawn_moves(*white) {
        let mask = bitboard_from_coords(*mov.from_row, *mov.from_col);
        
        if !pawn.contains(mask) {
            pawn.add(*mask, arr<Move>());
        }

        pawn.get(mask).as<@Array<Move>>().push(move(mov));
    }

    /*
        Rook moves
    */

    let rook = res.get(1.mut()).as<@HashMap<Int, Array<Move>>>();

    for mov in rook_moves(*white) {
        let mask = bitboard_from_coords(*mov.from_row, *mov.from_col);
        
        if !rook.contains(mask) {
            rook.add(*mask, arr<Move>());
        }

        rook.get(mask).as<@Array<Move>>().push(move(mov));
    }

    /*
        Knight moves
    */

    let knight = res.get(2.mut()).as<@HashMap<Int, Array<Move>>>();

    for mov in knight_moves() {
        let mask = bitboard_from_coords(*mov.from_row, *mov.from_col);
        
        if !knight.contains(mask) {
            knight.add(*mask, arr<Move>());
        }

        knight.get(mask).as<@Array<Move>>().push(move(mov));
    }

    /*
        Bishop moves
    */

    let bishop = res.get(3.mut()).as<@HashMap<Int, Array<Move>>>();

    for mov in bishop_moves() {
        let mask = bitboard_from_coords(*mov.from_row, *mov.from_col);
        
        if !bishop.contains(mask) {
            bishop.add(*mask, arr<Move>());
        }

        bishop.get(mask).as<@Array<Move>>().push(move(mov));
    }

    /*
        Queen moves
    */

    let queen = res.get(4.mut()).as<@HashMap<Int, Array<Move>>>();

    for mov in queen_moves() {
        let mask = bitboard_from_coords(*mov.from_row, *mov.from_col);
        
        if !queen.contains(mask) {
            queen.add(*mask, arr<Move>());
        }

        queen.get(mask).as<@Array<Move>>().push(move(mov));
    }

    /*
        King moves
    */

    let king = res.get(5.mut()).as<@HashMap<Int, Array<Move>>>();

    for mov in king_moves() {
        let mask = bitboard_from_coords(*mov.from_row, *mov.from_col);
        
        if !king.contains(mask) {
            king.add(*mask, arr<Move>());
        }

        king.get(mask).as<@Array<Move>>().push(move(mov));
    }

    return move(res);
}

fn is_pseudo_legal(mov: @Move, p_mask: @Int, o_mask: @Int, en_passant_mask: @Int, queen_cast: Bool, king_cast: Bool, attack_mask: &Int) -> Bool {
    if mov.piece == 0 {
        return is_pawn_move_legal(mov, p_mask, o_mask, en_passant_mask);
    
    } else if mov.piece == 1 {
        return is_rook_move_legal(mov, p_mask, o_mask, *queen_cast, *king_cast, attack_mask);
    
    } else if mov.piece == 2 {
        return is_knight_move_legal(mov, p_mask, o_mask);
    
    } else if mov.piece == 3 {
        return is_bishop_move_legal(mov, p_mask, o_mask);
    
    } else if mov.piece == 4 {
        return is_queen_move_legal(mov, p_mask, o_mask);
    
    } else {
        return is_king_move_legal(mov, p_mask, o_mask);
    }
}

/*
    Attack masks
*/

fn get_pawn_attack_mask(row: Int, col: Int, white: Bool) -> Int {
    // En passant is kind of a problem here
    let res = 0;

    let movement_dir = 1;

    if !white {
        movement_dir := -1;
    }

    if col > 0 {
        res := res | bitboard_from_coords(row + movement_dir, *col - 1);
    }

    if col < 7 {
        res := res | bitboard_from_coords(row + movement_dir, *col + 1);
    }

    return *res;
}

fn get_knight_attack_mask(row: Int, col: Int) -> Int {
    let res = 0;

    let offsets = arr<(Int, Int)>();

    offsets.push((1, 2));
    offsets.push((2, 1));
    offsets.push((-1, -2));
    offsets.push((-2, -1));
    offsets.push((-1, 2));
    offsets.push((-2, 1));
    offsets.push((1, -2));
    offsets.push((2, -1));

    for offset in offsets {
        let off_row = offset.get_0();
        let off_col = offset.get_1();

        let target_row = row + off_row;
        let target_col = col + off_col;

        if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
            res := res | bitboard_from_coords(*target_row, *target_col);
        }
    }

    return *res;
}

fn get_king_attack_mask(row: Int, col: Int) -> Int {
    let res = 0;

    let offsets = arr<(Int, Int)>();

    offsets.push((0, 1));
    offsets.push((0, -1));
    offsets.push((1, 0));
    offsets.push((-1, 0));
    offsets.push((1, 1));
    offsets.push((1, -1));
    offsets.push((-1, 1));
    offsets.push((-1, -1));

    for offset in offsets {
        let off_row = offset.get_0();
        let off_col = offset.get_1();

        let target_row = row + off_row;
        let target_col = col + off_col;

        if target_row >= 0 && target_row < 8 && target_col >= 0 && target_col < 8 {
            res := res | bitboard_from_coords(*target_row, *target_col);
        }
    }

    return *res;
}

fn get_sliding_attack_mask(row: Int, col: Int, drow: Int, dcol: Int, piece_mask: &Int) -> Int {    
    let res = 0;

    row := row + drow;
    col := col + dcol;

    while row >= 0 && row <= 7 && col >= 0 && col <= 7 {
        res := res | bitboard_from_coords(*row, *col);

        if res & piece_mask != 0 {
            return *res;
        }

        row := row + drow;
        col := col + dcol;
    }

    return *res;
}

fn get_rook_attack_mask(row: Int, col: Int, piece_mask: &Int) -> Int {
    return get_sliding_attack_mask(*row, *col, 1, 0, piece_mask) |
           get_sliding_attack_mask(*row, *col, -1, 0, piece_mask) |
           get_sliding_attack_mask(*row, *col, 0, 1, piece_mask) |
           get_sliding_attack_mask(*row, *col, 0, -1, piece_mask);
}

fn get_bishop_attack_mask(row: Int, col: Int, piece_mask: &Int) -> Int {
    return get_sliding_attack_mask(*row, *col, 1, 1, piece_mask) |
           get_sliding_attack_mask(*row, *col, -1, 1, piece_mask) |
           get_sliding_attack_mask(*row, *col, 1, -1, piece_mask) |
           get_sliding_attack_mask(*row, *col, -1, -1, piece_mask);
}

fn get_queen_attack_mask(row: Int, col: Int, piece_mask: &Int) -> Int {
    return get_sliding_attack_mask(*row, *col, 1, 0, piece_mask) |
           get_sliding_attack_mask(*row, *col, -1, 0, piece_mask) |
           get_sliding_attack_mask(*row, *col, 0, 1, piece_mask) |
           get_sliding_attack_mask(*row, *col, 0, -1, piece_mask) |
           get_sliding_attack_mask(*row, *col, 1, 1, piece_mask) |
           get_sliding_attack_mask(*row, *col, -1, 1, piece_mask) |
           get_sliding_attack_mask(*row, *col, 1, -1, piece_mask) |
           get_sliding_attack_mask(*row, *col, -1, -1, piece_mask);
}

fn get_pawn_attack_lookup(white: Bool) -> Array<Int> {
    let res = arr<Int>();

    for i in range(0, 64) {
        if i < 8 || i >= 56 {
            res.push(0);

        } else {
            let row = i / 8;
            let col = i % 8;

            res.push(get_pawn_attack_mask(*row, *col, *white));
        }
    }

    return move(res);
}

fn get_knight_attack_lookup() -> Array<Int> {
    let res = arr<Int>();

    for i in range(0, 64) {
        let row = i / 8;
        let col = i % 8;

        res.push(get_knight_attack_mask(*row, *col));
    }

    return move(res);
}

fn get_king_attack_lookup() -> Array<Int> {
    let res = arr<Int>();

    for i in range(0, 64) {
        let row = i / 8;
        let col = i % 8;

        res.push(get_king_attack_mask(*row, *col));
    }

    return move(res);
}

fn get_controlling_lookup_tables() -> Array<Array<Int>> {
    let res = arr<Array<Int>>();
    res.reserve(4);

    res.push(get_pawn_attack_lookup(true));
    res.push(get_pawn_attack_lookup(false));
    res.push(get_knight_attack_lookup());
    res.push(get_king_attack_lookup());

    return move(res);
}